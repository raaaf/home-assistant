# Areas - Kinderzimmer.Yaml
# Generated by automation splitter - 4 automations
# Part of Home Assistant configuration

- id: '1692710690350'
  alias: Motion » Kinderzimmer
  description: Bewegungsgesteuerte Beleuchtung im Kinderzimmer mit Nachtlicht-Modus
    und Helligkeitssensor
  use_blueprint:
    path: Blackshome/sensor-light.yaml
    input:
      motion_trigger:
      - binary_sensor.kinderzimmer_motion_presence
      light_switch:
        entity_id: light.alle_kinderzimmer_lichter
      include_ambient: ambient_enabled
      ambient_light_sensor: sensor.balkon_motion_illuminance_safe
      include_night_lights: night_lights_enabled
      night_lights:
        entity_id: light.alle_kinderzimmer_nachtlichter
      include_night_light_control:
      - use_night_brightness
      - use_brightness
      night_lights_after_time: '19:00:00'
      night_lights_before_time: 06:00:00
      time_delay: 0
      night_time_delay: 0
      night_lights_conditions:
      - entity_state_enabled
      night_lights_entity_state:
      - input_boolean.schlafenszeit
      include_sun: sun_disabled
      night_light_brightness: 5
      ambient_light_value: 150
      ambient_light_high_value: 200
      include_device_tracker: zone_enabled
      zone: zone.home
- id: '1722519561150'
  alias: Helper » Dynamische Kinder-Schlafzeiten
  description: 'Berechnet täglich optimale Schlafzeiten für Kinder basierend auf:
    - Jahreszeit und Monat - Sonnenuntergang - Wetter und Helligkeit - Temperatur

    '
  trigger:
  - at: 00:10:00
    trigger: time
  conditions: []
  actions:
  - variables:
      basis_einschlaf_schultag: '19:30:00'
      basis_einschlaf_wochenende: '20:00:00'
      basis_aufwach_schultag: 06:30:00
      basis_aufwach_wochenende: 07:00:00
      aktueller_monat: '{{ now().month | int }}'
      aussentemperatur: '{% if has_value(''weather.fuerth_bayern'') %}{{ state_attr(''weather.fuerth_bayern'', ''temperature'')
        | float(20) }}{% else %}20{% endif %}'
      helligkeit_draussen: '{% if has_value(''sensor.balkon_motion_illuminance'') %}{{ states(''sensor.balkon_motion_illuminance'') | float(100)
        }}{% else %}100{% endif %}'
      wetter: '{% if has_value(''weather.fuerth_bayern'') %}{{ states(''weather.fuerth_bayern'') }}{% else %}sunny{% endif %}'
      sonnenuntergang_zeit: "{% set su = state_attr('sun.sun', 'next_setting') %}\
        \ {% if su %}\n  {{ (su | as_datetime | as_local).strftime('%H:%M') }}\n{%\
        \ else %}\n  20:00\n{% endif %}\n"
      helligkeit_offset: "{% if has_value('sensor.balkon_motion_illuminance') %}{% set lux = states('sensor.balkon_motion_illuminance')\
        \ | float(100) %}{% else %}{% set lux = 100 %}{% endif %} {% if lux < 10 %}\n  {{ -20 }}\n{% elif lux < 50 %}\n  {{\
        \ -10 }}\n{% elif lux < 200 %}\n  {{ 0 }}\n{% elif lux < 1000 %}\n  {{ 10\
        \ }}\n{% else %}\n  {{ 15 }}\n{% endif %}\n"
      saison_offset_einschlaf: "{% set m = now().month | int %} {% if m == 12 or m\
        \ == 1 %}\n  {{ -30 }}\n{% elif m == 2 or m == 11 %}\n  {{ -20 }}\n{% elif\
        \ m == 3 or m == 10 %}\n  {{ -10 }}\n{% elif m == 4 or m == 9 %}\n  {{ 0 }}\n\
        {% elif m == 5 or m == 8 %}\n  {{ 15 }}\n{% elif m == 6 or m == 7 %}\n  {{\
        \ 30 }}\n{% else %}\n  {{ 0 }}\n{% endif %}\n"
      saison_offset_aufwach: "{% set m = now().month | int %} {% if m == 12 or m ==\
        \ 1 %}\n  {{ 30 }}\n{% elif m == 2 or m == 11 %}\n  {{ 20 }}\n{% elif m ==\
        \ 3 or m == 10 %}\n  {{ 10 }}\n{% elif m == 4 or m == 9 %}\n  {{ 0 }}\n{%\
        \ elif m == 5 or m == 8 %}\n  {{ -10 }}\n{% elif m == 6 or m == 7 %}\n  {{\
        \ -20 }}\n{% else %}\n  {{ 0 }}\n{% endif %}\n"
      sonnenuntergang_offset: "{% set su = state_attr('sun.sun', 'next_setting') %}\
        \ {% if su %}\n  {% set su_time = su | as_datetime | as_local %}\n  {% set\
        \ stunde = su_time.hour + (su_time.minute / 60) %}\n  {% if stunde < 17 %}\n\
        \    {{ -20 }}\n  {% elif stunde < 18 %}\n    {{ -10 }}\n  {% elif stunde\
        \ < 19 %}\n    {{ 0 }}\n  {% elif stunde < 20 %}\n    {{ 10 }}\n  {% elif\
        \ stunde < 21 %}\n    {{ 20 }}\n  {% else %}\n    {{ 30 }}\n  {% endif %}\n\
        {% else %}\n  {{ 0 }}\n{% endif %}\n"
      wetter_offset: "{% if has_value('weather.fuerth_bayern') %}{% set w = states('weather.fuerth_bayern') %} {% set temp =\
        \ state_attr('weather.fuerth_bayern', 'temperature') | float(20) %}{% else %}{% set w = 'sunny' %}{% set temp = 20 %}{% endif %} {% if\
        \ w == 'rainy' or w == 'pouring' or w == 'lightning-rainy' %}\n  {{ -15 }}\n\
        {% elif w == 'sunny' and temp > 25 %}\n  {{ 15 }}\n{% elif w == 'partlycloudy'\
        \ and temp > 25 %}\n  {{ 10 }}\n{% else %}\n  {{ 0 }}\n{% endif %}\n"
      temp_offset: "{% if has_value('weather.fuerth_bayern') %}{% set t = state_attr('weather.fuerth_bayern', 'temperature')\
        \ | float(20) %}{% else %}{% set t = 20 %}{% endif %} {% if t < 5 %}\n  {{ -10 }}\n{% elif t > 28 %}\n  {{ 20 }}\n\
        {% else %}\n  {{ 0 }}\n{% endif %}\n"
      gesamt_offset_einschlaf_schultag: '{% set total = saison_offset_einschlaf|int
        + sonnenuntergang_offset|int + helligkeit_offset|int + wetter_offset|int +
        temp_offset|int %} {% set begrenzt = [total, -30] | max %} {{ [begrenzt, 30]
        | min }}  {# Max 30 Min statt 45 #}

        '
      gesamt_offset_einschlaf_wochenende: '{% set total = saison_offset_einschlaf|int
        + sonnenuntergang_offset|int + helligkeit_offset|int + wetter_offset|int +
        temp_offset|int %} {% set begrenzt = [total, -30] | max %} {{ [begrenzt, 45]
        | min }}  {# Max 45 Min statt 60 #}

        '
      gesamt_offset_aufwach: '{% set total = saison_offset_aufwach|int %} {% set begrenzt
        = [total, -15] | max %} {{ [begrenzt, 30] | min }}  {# Weniger extreme Anpassung
        #}

        '
      einschlaf_schultag_final: '{% set basis = today_at(basis_einschlaf_schultag)
        %} {% set angepasst = basis + timedelta(minutes=gesamt_offset_einschlaf_schultag|int)
        %} {{ angepasst.strftime(''%H:%M:%S'') }}

        '
      einschlaf_wochenende_final: '{% set basis = today_at(basis_einschlaf_wochenende)
        %} {% set angepasst = basis + timedelta(minutes=gesamt_offset_einschlaf_wochenende|int)
        %} {{ angepasst.strftime(''%H:%M:%S'') }}

        '
      aufwach_schultag_final: '{% set basis = today_at(basis_aufwach_schultag) %}
        {% set angepasst = basis + timedelta(minutes=gesamt_offset_aufwach|int) %}
        {{ angepasst.strftime(''%H:%M:%S'') }}

        '
      aufwach_wochenende_final: '{% set basis = today_at(basis_aufwach_wochenende)
        %} {% set angepasst = basis + timedelta(minutes=gesamt_offset_aufwach|int)
        %} {{ angepasst.strftime(''%H:%M:%S'') }}

        '
  - action: input_datetime.set_datetime
    target:
      entity_id: input_datetime.einschlafzeit_arbeitstag
    data:
      time: '{{ einschlaf_schultag_final }}'
  - action: input_datetime.set_datetime
    target:
      entity_id: input_datetime.einschlafzeit_freier_tag
    data:
      time: '{{ einschlaf_wochenende_final }}'
  - action: input_datetime.set_datetime
    target:
      entity_id: input_datetime.aufwachzeit_arbeitstag
    data:
      time: '{{ aufwach_schultag_final }}'
  - action: input_datetime.set_datetime
    target:
      entity_id: input_datetime.aufwachzeit_freier_tag
    data:
      time: '{{ aufwach_wochenende_final }}'
  - action: notify.persistent_notification
    data:
      message: '📅 {{ now().strftime(''%d.%m.%Y'') }} ({{ wetter }})

        **Faktoren:** 🌡️ {{ aussentemperatur }}°C ({{ temp_offset }}min) 🌅 {{ sonnenuntergang_zeit
        }} ({{ sonnenuntergang_offset }}min) 💡 {{ helligkeit_draussen|int }} lux ({{
        helligkeit_offset }}min) 📆 Juni ({{ saison_offset_einschlaf }}min)

        **Zeiten:** Schultage: {{ einschlaf_schultag_final[:5] }} - {{ aufwach_schultag_final[:5]
        }} Wochenende: {{ einschlaf_wochenende_final[:5] }} - {{ aufwach_wochenende_final[:5]
        }}

        **Gesamt-Anpassung:** Schlafenszeit: {{ gesamt_offset_einschlaf_schultag }}min

        '
      title: Schlafenszeiten angepasst
  mode: single
