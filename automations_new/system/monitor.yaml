# System - Monitor.yaml
# System health monitoring and performance tracking
# Part of Home Assistant configuration
#
# NOTE: System monitor integration is fully active and configured
# All system monitoring entities are now working:
# - sensor.processor_use (CPU usage %)
# - sensor.memory_use (Memory usage MB)
# - sensor.system_monitor_disk_usage (Disk usage %)
# - sensor.last_boot (System uptime)

- id: 'system_health_monitor'
  alias: System ¬ª Health Monitor
  description: √úberwacht Systemzustand, Performance und kritische Metriken
  mode: queued
  max: 5
  triggers:
  - trigger: time_pattern
    minutes: "/15"
    id: periodic_check
  - trigger: numeric_state
    entity_id: sensor.processor_use
    above: 90
    for: "00:05:00"
    id: high_cpu
    enabled: true  # Now enabled - System Monitor integration is active
  - trigger: numeric_state
    entity_id: sensor.memory_use
    above: 1500  # MiB (approximately 90% of typical 2GB system)
    for: "00:05:00" 
    id: high_memory
    enabled: true  # Now enabled - System Monitor integration is active
  - trigger: numeric_state
    entity_id: sensor.system_monitor_disk_usage
    above: 90
    id: high_disk
    enabled: true  # Now enabled with correct entity name
  - trigger: state
    entity_id:
      - sensor.hacs
      - sensor.supervisor_updates
    id: updates_available
  conditions:
  # Only run if at least one system sensor is available
  - condition: template
    value_template: >-
      {% set system_sensors = [
        'sensor.processor_use', 'sensor.memory_use', 'sensor.system_monitor_disk_usage', 'sensor.last_boot'
      ] %}
      {{ system_sensors | select('has_value') | list | length > 0 }}
  actions:
  - variables:
      # System monitor sensors are now active
      cpu_usage: "{{ states('sensor.processor_use') | float(0) if has_value('sensor.processor_use') else 'N/A' }}"
      memory_usage_mb: "{{ states('sensor.memory_use') | float(0) if has_value('sensor.memory_use') else 'N/A' }}"
      memory_usage_percent: >-
        {% if has_value('sensor.memory_use') %}
          {% set mem_mb = states('sensor.memory_use') | float(0) %}
          {% set total_mb = 2048 %}  {# Adjust based on your system's RAM #}
          {{ (mem_mb / total_mb * 100) | round(1) }}
        {% else %}
          N/A
        {% endif %}
      disk_usage: "{{ states('sensor.system_monitor_disk_usage') | float(0) if has_value('sensor.system_monitor_disk_usage') else 'N/A' }}"
      uptime_hours: >-
        {% if has_value('sensor.uptime') %}
          {{ (now().timestamp() - as_timestamp(states('sensor.uptime'))) / 3600 }}
        {% elif has_value('sensor.last_boot') %}
          {{ (now().timestamp() - as_timestamp(states('sensor.last_boot'))) / 3600 }}
        {% else %}
          N/A
        {% endif %}
      is_quiet_hours: "{{ now().hour >= 22 or now().hour < 6 }}"  # Fixed quiet hours
  - choose:
    # Critical resource usage - immediate notification
    - conditions: 
      - "{{ trigger.id in ['high_cpu', 'high_memory', 'high_disk'] }}"
      - condition: template
        value_template: "{{ has_value('notify.admin_only') }}"
      sequence:
      - action: notify.admin_only
        data:
          title: "üö® Kritische Systemauslastung!"
          message: >
            {% if trigger.id == 'high_cpu' %}
              CPU-Auslastung: {{ cpu_usage }}% (>90% f√ºr 5+ Min)
            {% elif trigger.id == 'high_memory' %}
              RAM-Auslastung: {{ memory_usage_mb }}MB ({{ memory_usage_percent }}%)
            {% elif trigger.id == 'high_disk' %}
              Festplatte: {{ disk_usage }}% (>90%)
            {% endif %}
          data:
            priority: high
            tag: system_critical

    # Updates available
    - conditions:
      - "{{ trigger.id == 'updates_available' }}"
      - condition: template
        value_template: "{{ not is_quiet_hours }}"
      - condition: template
        value_template: "{{ has_value('notify.admin_only') }}"
      sequence:
      - action: notify.admin_only
        data:
          title: "üì¶ Updates verf√ºgbar"
          message: >
            {% if is_number(states('sensor.hacs')) and states('sensor.hacs') | int > 0 %}
              HACS: {{ states('sensor.hacs') }} Updates verf√ºgbar
            {% endif %}
            {% if is_number(states('sensor.supervisor_updates')) and states('sensor.supervisor_updates') | int > 0 %}
              System: {{ states('sensor.supervisor_updates') }} Updates verf√ºgbar
            {% endif %}
          data:
            tag: system_updates

    # Periodic health check
    - conditions:
      - "{{ trigger.id == 'periodic_check' }}"
      sequence:
# System status stored in logbook only (no input_text helper)

      # Log health check results
      - action: logbook.log
        data:
          name: System Health Check
          message: >
            CPU: {{ cpu_usage }}% | RAM: {{ memory_usage_mb }}MB ({{ memory_usage_percent }}%)
            | Disk: {{ disk_usage }}% | Uptime: {{ uptime_hours | round(1) }}h

      # Warning for sustained high usage (not critical threshold)
      - if:
        - condition: template
          value_template: >
            {{ (cpu_usage != 'N/A' and cpu_usage | float(0) > 75) or 
               (memory_usage_percent != 'N/A' and memory_usage_percent | float(0) > 75) }}
        - condition: template
          value_template: "{{ not is_quiet_hours }}"
        - condition: template
          value_template: "{{ has_value('notify.admin_only') }}"
        then:
        - action: notify.admin_only
          data:
            title: "‚ö†Ô∏è Erh√∂hte Systemauslastung"
            message: >
              CPU: {{ cpu_usage }}{% if cpu_usage != 'N/A' %}%{% endif %}, 
              RAM: {{ memory_usage_mb }}MB ({{ memory_usage_percent }}{% if memory_usage_percent != 'N/A' %}%{% endif %})
              {% if uptime_hours != 'N/A' %}System l√§uft seit {{ uptime_hours | round(1) }} Stunden{% endif %}
            data:
              tag: system_warning

    # Error handling
    default:
    - action: logbook.log
      data:
        name: System Monitor Fehler  
        message: "Unbekannter Trigger: {{ trigger.id }}"

- id: 'system_integration_monitor'
  alias: System ¬ª Integration Monitor  
  description: √úberwacht den Status kritischer Integrationen und meldet Ausf√§lle
  mode: queued
  max: 3
  triggers:
  - trigger: state
    entity_id:
      # Critical integrations to monitor
      - binary_sensor.aqara_hub_connection
      - binary_sensor.router_connection
      - binary_sensor.internet_connection
    from: 'on'
    to: 'off'
    for: "00:02:00"
    id: integration_offline
  - trigger: state
    entity_id:
      - binary_sensor.aqara_hub_connection
      - binary_sensor.router_connection  
      - binary_sensor.internet_connection
    from: 'off'
    to: 'on'
    id: integration_online
  conditions: []  # Always enabled
  actions:
  - variables:
      failed_integration: "{{ trigger.to_state.name }}"
      is_quiet_hours: "{{ now().hour >= 22 or now().hour < 6 }}"  # Fixed quiet hours
  - choose:
    # Integration went offline
    - conditions:
      - "{{ trigger.id == 'integration_offline' }}"
      - condition: template
        value_template: "{{ not is_quiet_hours }}"
      - condition: template
        value_template: "{{ has_value('notify.admin_only') }}"
      sequence:
      - action: notify.admin_only
        data:
          title: "üîå Integration ausgefallen"
          message: "{{ failed_integration }} ist seit 2+ Minuten offline"
          data:
            priority: high
            tag: "integration_{{ trigger.entity_id.split('.')[1] }}"

    # Integration came back online
    - conditions:
      - "{{ trigger.id == 'integration_online' }}"
      - condition: template
        value_template: "{{ has_value('notify.admin_only') }}"
      sequence:
      - action: notify.admin_only
        data:
          title: "‚úÖ Integration wiederhergestellt"
          message: "{{ failed_integration }} ist wieder online"
          data:
            tag: "integration_{{ trigger.entity_id.split('.')[1] }}"

  # Always log integration status changes
  - action: logbook.log
    data:
      name: Integration Monitor
      message: >
        {{ failed_integration }} ist {{ 'offline' if trigger.to_state.state == 'off' else 'online' }}

- id: 'system_database_maintenance'  
  alias: System ¬ª Database Maintenance
  description: Automatische Datenbankwartung und -optimierung
  mode: single
  triggers:
  - trigger: time
    at: "03:00:00"
    id: daily_maintenance
  - trigger: numeric_state
    entity_id: sensor.database_size
    above: 1000  # MB
    id: large_database
    enabled: false  # Disabled - database size sensor not available
  conditions:
  - condition: state
    entity_id: input_boolean.system_monitoring_enabled  
    state: 'on'
  actions:
  - variables:
      db_size_mb: "{{ states('sensor.database_size') | float(0) if has_value('sensor.database_size') else 0 }}"
      purge_days: 7  # Keep 7 days of history
  - choose:
    # Daily maintenance
    - conditions:
      - "{{ trigger.id == 'daily_maintenance' }}"
      sequence:
      - action: recorder.purge
        data:
          keep_days: "{{ purge_days }}"
          repack: true
      - action: logbook.log
        data:
          name: Database Maintenance
          message: >
            Automatische DB-Bereinigung durchgef√ºhrt
            | Gr√∂√üe vorher: {{ db_size_mb }}MB
            | Aufbewahrung: {{ purge_days }} Tage

    # Large database warning
    - conditions:
      - "{{ trigger.id == 'large_database' }}"
      - condition: template
        value_template: "{{ has_value('notify.admin_only') }}"
      sequence:
      - action: notify.admin_only
        data:
          title: "üíæ Datenbank wird gro√ü"
          message: >
            Datenbankgr√∂√üe: {{ db_size_mb }}MB
            Erw√§ge Anpassung der recorder-Konfiguration
          data:
            tag: database_size