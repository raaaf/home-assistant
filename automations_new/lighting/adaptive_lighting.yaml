# Lighting - Adaptive Lighting.Yaml
# Generated by automation splitter - 1 automations
# Part of Home Assistant configuration

- id: '1736168695364'
  alias: Lichter ausschalten bei Inaktivität (Areas)
  description: Schaltet Lichter in Räumen nach 30 Minuten Inaktivität automatisch
    aus, außer bestimmte ausgeschlossene Lampen
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.flur_motion
    - binary_sensor.balkon_motion_occupancy
    - binary_sensor.kuche_motion_occupancy
    - binary_sensor.haustur_motion_occupancy
    - binary_sensor.badezimmer_motion_presence
    - binary_sensor.waschzimmer_motion_occupancy
    - binary_sensor.kinderzimmer_motion_occupancy
    - binary_sensor.arbeitszimmer_motion_occupancy
    - binary_sensor.ankleide_bewegungsmelder_occupancy
    to: 'off'
    for:
      hours: 0
      minutes: 30
      seconds: 0
  actions:
  - variables:
      motion_sensor: '{{ trigger.entity_id if has_value(trigger.entity_id) else "unknown" }}'
      motion_area: '{{ area_id(motion_sensor) if motion_sensor != "unknown" and has_value(motion_sensor) else "unknown" }}'
      entities_in_area: '{{ area_entities(motion_area) if motion_area != "unknown" and has_value(motion_area) else [] }}'
      lights_in_area: "{% if entities_in_area %}{{ expand(entities_in_area) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | rejectattr('state', 'in', ['unavailable', 'unknown']) | map(attribute='entity_id') | list }}{% else %}[]{% endif %}"
      excluded_lights:
      - light.hyperhdr
      - light.lichterkette
      - light.schwarze_stehlampe
      lights_to_turn_off: '{{ lights_in_area | reject("in", excluded_lights) | list if lights_in_area else [] }}'
      area_name: '{{ area_name(motion_area) if motion_area != "unknown" and has_value(motion_area) else "Unbekannter Bereich" }}'
  - choose:
    - alias: Lichter ausschalten wenn vorhanden und Area bekannt
      conditions:
      - alias: Area wurde gefunden
        condition: template
        value_template: '{{ motion_area != "unknown" and has_value(motion_area) }}'
      - alias: Es gibt Lichter zum Ausschalten
        condition: template
        value_template: '{{ lights_to_turn_off | length > 0 }}'
      - alias: Nicht während Schlafenszeit (verhindert störende Logs)
        condition: state
        entity_id: input_boolean.schlafenszeit
        state: 'off'
      - condition: template
        value_template: "{{ has_value('input_boolean.schlafenszeit') }}"
      sequence:
      - alias: Lichter in Area ausschalten
        action: light.turn_off
        target:
          entity_id: '{{ lights_to_turn_off }}'
      - alias: Erfolgreiche Ausschaltung loggen
        action: logbook.log
        data:
          name: Inaktivitäts-Automation
          message: '{{ lights_to_turn_off | length }} Licht(er) in {{ area_name }}  nach
            30 Min Inaktivität ausgeschaltet: {{ lights_to_turn_off | join('', '')
            }}

            '
    - alias: Debugging bei Problemen
      conditions:
      - alias: Area unbekannt oder keine Lichter
        condition: or
        conditions:
        - condition: template
          value_template: '{{ motion_area == "unknown" or not has_value(motion_area) }}'
        - condition: template
          value_template: '{{ lights_to_turn_off | length == 0 }}'
      sequence:
      - alias: Debug-Information loggen
        action: logbook.log
        data:
          name: Inaktivitäts-Automation Debug
          message: 'Bewegungsmelder: {{ motion_sensor | replace(''binary_sensor.'',
            '''') }}. Area: {{ area_name }} ({{ motion_area }}). Alle Lichter in Area:
            {{ lights_in_area | length }}  ({{ lights_in_area | join('', '') if lights_in_area
            else ''keine'' }}). Nach Ausschluss: {{ lights_to_turn_off | length }}
            ({{ lights_to_turn_off | join('', '') if lights_to_turn_off else ''keine''
            }}). Zeit: {{ now().strftime(''%H:%M:%S am %d.%m.%Y'') }}

            '
  mode: restart
