- id: adaptive-lighting-prime-color-temp
  mode: single
  alias: Prime adaptive lighting color temperature
  description: |-
    Primes the color temperature of lights while they are off to minimize
    color temperature transition effects when they are turned on.
  triggers:
    - trigger: time_pattern
      minutes: /5
      id: prime_color_temp
    - platform: homeassistant
      event: start
  conditions: []
  variables:
    lifx_light_entities: |-
      {{integration_entities("lifx") |
        select("match", "^light\.") |
        expand |
        map(attribute='entity_id') |
        list}}
    mqtt_light_entities: |-
      {{integration_entities("mqtt") |
        select("match", "^light\.") |
        expand |
        map(attribute='entity_id') |
        list}}
    lights_to_skip_config: []
    adaptive_lighting_switch_entities: |-
      {%set ns=namespace(list=[])%}
      {%for _ in integration_entities("adaptive_lighting") |
                 select("match", "^switch\.(\w+_|)adaptive_lighting_adapt_color(|_\w+)") |
                 expand |
                 selectattr("state", "==", "on") |
                 map(attribute="entity_id") |
                 list%}
        {%set ns.list=ns.list + [_|replace("_adapt_color", "")]%}
      {%endfor%}
      {{ns.list}}
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
          - prime_color_temp
      sequence:
      - repeat:
          for_each: '{{adaptive_lighting_switch_entities}}'
          sequence:
            - variables:
                adaptive_lighting_switch_entity: '{{repeat.item}}'
                adaptive_lighting_light_entities: |-
                  {{state_attr(adaptive_lighting_switch_entity, "configuration").lights |
                    expand |
                    selectattr("attributes.supported_color_modes", "defined") |
                    selectattr("attributes.supported_color_modes", "contains", "color_temp") |
                    selectattr("state", "==", "off") |
                    map(attribute="entity_id") |
                    list}}
                adaptive_lighting_color_temperature_mired: |-
                  {{state_attr(adaptive_lighting_switch_entity, "color_temp_mired")}}
                adaptive_lighting_color_temperature_kelvin: |-
                  {{state_attr(adaptive_lighting_switch_entity, "color_temp_kelvin")}}
            - repeat:
                for_each: '{{adaptive_lighting_light_entities}}'
                sequence:
                  - variables:
                      light_entity: '{{repeat.item}}'
                  - choose:
                    - conditions:
                      - condition: template
                        value_template: |-
                          {{light_entity in lifx_light_entities}}
                      sequence:
                      - action: lifx.set_state
                        data:
                          color_temp_kelvin: '{{adaptive_lighting_color_temperature_kelvin}}'
                        target:
                          entity_id: '{{light_entity}}'
                    - conditions:
                      - condition: and
                        conditions:
                        - condition: template
                          value_template: |-
                            {{light_entity in mqtt_light_entities}}
                        - condition: template
                          value_template: |-
                            {{light_entity not in lights_to_skip_config}}
                      sequence:
                      - variables:
                          mqtt_topic: |-
                            zigbee2mqtt/{{state_attr(light_entity, "friendly_name")}}/set
                      - action: mqtt.publish
                        data_template:
                          topic: '{{mqtt_topic}}'
                          payload: |-
                            {
                              "color_temp": {{adaptive_lighting_color_temperature_mired}},
                              "transition": 0
                            }
    default:
    - variables:
        adaptive_lighting_switches_requiring_settings_change: |-
          {{adaptive_lighting_switch_entities |
            expand |
            rejectattr("attributes.configuration.lights", "defined") |
            map(attribute='entity_id') |
            list}}
    - if:
      - condition: template
        value_template: '{{adaptive_lighting_switches_requiring_settings_change | length > 0}}'
      then:
      - repeat:
          for_each: '{{adaptive_lighting_switches_requiring_settings_change}}'
          sequence:
          - service: adaptive_lighting.change_switch_settings
            data:
              entity_id: '{{repeat.item}}'
              include_config_in_attributes: true
    - variables:
        light_entities: |-
          {%set ns=namespace(list=[])%}
          {%for adaptive_lighting_switch_entity in adaptive_lighting_switch_entities%}
            {%for _ in state_attr(adaptive_lighting_switch_entity, "configuration").lights |
                                  expand |
                                  selectattr("attributes.supported_color_modes", "defined") |
                                  selectattr("attributes.supported_color_modes", "contains", "color_temp") |
                                  map(attribute="entity_id") |
                                  list%}
              {%if _ in mqtt_light_entities%}
                {%set ns.list=ns.list + [_]%}
              {%endif%}
            {%endfor%}
          {%endfor%}
          {{ns.list}}
    - repeat:
        for_each: '{{light_entities}}'
        sequence:
        - variables:
            light_entity: '{{repeat.item}}'
            mqtt_topic: |-
              zigbee2mqtt/{{state_attr(light_entity, "friendly_name")}}/set
        - action: mqtt.publish
          data_template:
            topic: '{{mqtt_topic}}'
            payload: |-
              {
                "color_options": {
                  "execute_if_off": "true"
                }
              }
