# Notifications - Environment.Yaml
# Generated by automation splitter - 2 automations
# Part of Home Assistant configuration

- id: '1697018634962'
  alias: Notifications » Heizung > 4 Stunden
  description: Benachrichtigt wenn Heizungen länger als 4 Stunden aktiv sind
  triggers:
  - entity_id: sensor.heizung_arbeitszimmer_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_kinderzimmer_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_badezimmer_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_flur_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_wohnzimmer_an
    above: 4
    trigger: numeric_state
  conditions:
  - condition: template
    value_template: >
      {% set last = state_attr('automation.notifications_heizung_4_stunden', 'last_triggered') %}
      {{ last is none or (now() - last).total_seconds() > 12 * 60 * 60 }}
  actions:
  - variables:
      room_name_raw: "{{ trigger.entity_id | regex_replace('^sensor.heizung_', '') | regex_replace('_an$', '') }}"
      room_name_display: "{{ room_name_raw | replace('_', ' ') | title }}"
      heating_hours: "{{ trigger.to_state.state }}"
  - parallel:
      # TTS Ansage über HomePods
      - action: script.hausgeraete_ansage
        data:
          message: >-
            Die Heizung im {{ room_name_display }}
            läuft seit über 4 Stunden
          priority: "normal"
        continue_on_error: true
      
      # Mobile Benachrichtigung
      - action: notify.rafael
        data:
          title: 'Heizung: {{ room_name_display }}'
          message: 'Seit mehr als 4 Stunden aktiv (aktuell {{ heating_hours }} h).'
          data:
            push:
              interruption-level: critical
        continue_on_error: true
      
      # Persistent Notification als Backup
      - action: persistent_notification.create
        data:
          notification_id: "heizung_warnung_{{ room_name_raw }}"
          title: "🔥 Heizung läuft zu lange"
          message: "{{ room_name_display }} seit {{ heating_hours }} Stunden aktiv"
        continue_on_error: true
  mode: single
- id: '1738322846270'
  alias: Notification » Stromverbrauch gestern
  description: 'Erstellt eine persistente Benachrichtigung mit dem Stromverbrauch,
    der Solarproduktion, AC-Verbrauch und den Kosten des Vortages

    '
  triggers:
  - at: 00:05:00
    trigger: time
  conditions:
  - condition: template
    value_template: >
      {{ states('sensor.solarproduktion_gestern') not in ['unknown', 'unavailable']
         and state_attr('sensor.ac_energy_daily','last_period') is not none }}
  actions:
  - variables:
      verbrauch_netto: >-
        {% if state_attr('sensor.taglicher_netzbezug','last_period') is not none %}
          {{ state_attr('sensor.taglicher_netzbezug','last_period') | float(0) | round(2) }}
        {% else %}
          0
        {% endif %}
      solarproduktion_gestern: '{{ states(''sensor.solarproduktion_gestern'')
        | float(0) }}

        '
      verbrauch_brutto: '{{ (verbrauch_netto + solarproduktion_gestern) | round(2)
        }}

        '
      strompreis: >-
        {% if states('sensor.butzabatza_electricity_price') not in ['unknown', 'unavailable'] %}
          {{ states('sensor.butzabatza_electricity_price') | float(0.30) }}
        {% else %}
          0.30
        {% endif %}

        '
      kosten_ohne_solar: '{{ (verbrauch_brutto * strompreis) | round(2) }}

        '
      ersparnis_gestern: '{{ (solarproduktion_gestern * strompreis) | round(2) }}

        '
      kosten_nach_solar: '{{ (verbrauch_netto * strompreis) | round(2) }}

        '
      durchschnitt_pro_stunde: '{{ (verbrauch_netto / 24) | round(2) }}

        '
      datum_gestern: '{{ (now() - timedelta(days=1)).strftime(''%d.%m.%Y'') }}

        '
      ac_verbrauch_gestern: '{{ state_attr(''sensor.ac_energy_daily'',''last_period'')
        | float(0) | round(2) }}

        '
      ac_kosten_gestern: '{{ (state_attr(''sensor.ac_energy_daily'',''last_period'')
        | float(0) * strompreis) | round(2) }}

        '
      ac_anteil_prozent: >-
        {% set brutto = verbrauch_brutto | float(0) %}
        {% set ac_usage = ac_verbrauch_gestern | float(0) %}
        {% if brutto > 0 and ac_usage >= 0 %}
          {{ ((ac_usage / brutto) * 100) | round(1) }}
        {% else %}
          0
        {% endif %}
      ac_laufzeit_stunden: >-
        {% set avg_power = states('sensor.ac_power') | float(0) %}
        {% set ac_usage = ac_verbrauch_gestern | float(0) %}
        {% if avg_power > 50 and ac_usage > 0 %}
          {{ (ac_usage * 1000 / avg_power) | round(1) }}
        {% elif ac_usage > 0.1 %}
          {{ (ac_usage * 1000 / 800) | round(1) }}
        {% else %}
          0
        {% endif %}
      
      # EcoFlow Statistiken vom Vortag
      ecoflow_ladezyklen_gestern: >-
        {% set state = states('counter.ecoflow_ladezyklen_heute') %}
        {{ state if state not in ['unknown', 'unavailable'] else 0 }}
      
      ecoflow_entladezyklen_gestern: >-
        {% set state = states('counter.ecoflow_entladezyklen_heute') %}
        {{ state if state not in ['unknown', 'unavailable'] else 0 }}
      
      ecoflow_current_soc: >-
        {% set soc = states('sensor.ecoflow_aktueller_soc')|float(0) %}
        {{ soc if soc > 0 else 0 }}
      
      ecoflow_automation_aktiv: >-
        {{ 'an' if is_state('input_boolean.ecoflow_automation_enabled', 'on') else 'aus' }}
      
      ecoflow_gesamt_zyklen: >-
        {{ (ecoflow_ladezyklen_gestern|int(0) + ecoflow_entladezyklen_gestern|int(0)) }}
      
      # Berechnung PV-Überschuss Nutzung durch EcoFlow
      vermiedene_einspeisung: >-
        {% set zyklen = ecoflow_ladezyklen_gestern|int(0) %}
        {% set min_laufzeit = states('input_number.ecoflow_min_laufzeit')|float(10) %}
        {% set avg_ladeleistung = 400 %}
        {{ ((zyklen * min_laufzeit * avg_ladeleistung) / 1000) | round(2) if zyklen > 0 else 0 }}
      
      ecoflow_effizienz: >-
        {% set vermieden = vermiedene_einspeisung|float(0) %}
        {% set solar = solarproduktion_gestern|float(0) %}
        {{ ((vermieden / solar * 100) | round(1)) if solar > 0 and vermieden > 0 else 0 }}
  - data:
      title: ⚡ Energie-Bilanz {{ datum_gestern }}
      message: >-
        **📊 Verbrauch:**
        🔌 Gesamt (Brutto): {{ verbrauch_brutto }} kWh
        🔌 Netzbezug (Netto): {{ verbrauch_netto }} kWh
        ⏳ Ø pro Stunde: {{ durchschnitt_pro_stunde }} kWh

        **❄️ Klimaanlage:**
        Verbrauch: {{ ac_verbrauch_gestern }} kWh ({{ ac_anteil_prozent }}% vom Gesamtverbrauch)
        Kosten: {{ ac_kosten_gestern }} €
        Geschätzte Laufzeit: {{ ac_laufzeit_stunden }} Stunden

        **🔋 EcoFlow STREAM Pro:**
        Aktueller Ladestand: {{ ecoflow_current_soc }}%
        Ladezyklen: {{ ecoflow_ladezyklen_gestern }}x
        Entladezyklen: {{ ecoflow_entladezyklen_gestern }}x
        Vermiedene Einspeisung: {{ vermiedene_einspeisung }} kWh
        {% if ecoflow_effizienz|float(0) > 0 %}PV-Nutzungseffizienz: {{ ecoflow_effizienz }}%
        {% endif %}Automation: {{ ecoflow_automation_aktiv }}

        **☀️ Solar:**
        Produktion: {{ solarproduktion_gestern }} kWh
        {% if vermiedene_einspeisung|float(0) > 0 %}Direktnutzung: {{ (solarproduktion_gestern|float(0) - vermiedene_einspeisung|float(0))|round(2) }} kWh
        Gespeichert (EcoFlow): {{ vermiedene_einspeisung }} kWh
        {% else %}Direktnutzung: {{ solarproduktion_gestern }} kWh (angenommen)
        {% endif %}

        **💰 Kosten:** ({{ strompreis }} €/kWh)
        Ohne Solar: {{ kosten_ohne_solar }} €
        Ersparnis: −{{ ersparnis_gestern }} €
        ➔ Tatsächlich: {{ kosten_nach_solar }} €

        **📈 Effizienz:**
        Autarkiegrad: {{ ((solarproduktion_gestern / verbrauch_brutto * 100) | round(0)) }}%
        {% if ecoflow_gesamt_zyklen|int(0) > 0 %}EcoFlow-Zyklen: {{ ecoflow_gesamt_zyklen }}
        {% endif %}
    action: persistent_notification.create
  - data:
      message: >-
        Tagesstatistik {{ datum_gestern }}: 
        Verbrauch {{ verbrauch_brutto }} kWh (Netto: {{ verbrauch_netto }} kWh), 
        AC-Verbrauch {{ ac_verbrauch_gestern }} kWh ({{ ac_anteil_prozent }}%), 
        Solar {{ solarproduktion_gestern }} kWh{% if vermiedene_einspeisung|float(0) > 0 %} (EcoFlow: {{ vermiedene_einspeisung }} kWh){% endif %}, 
        Kosten {{ kosten_nach_solar }} € (Ersparnis: {{ ersparnis_gestern }} €), 
        Autarkiegrad {{ ((solarproduktion_gestern / verbrauch_brutto * 100) | round(0)) }}%{% if ecoflow_gesamt_zyklen|int(0) > 0 %}, 
        EcoFlow: {{ ecoflow_ladezyklen_gestern }}L/{{ ecoflow_entladezyklen_gestern }}E Zyklen{% endif %}
      name: Energie-Bilanz
      domain: automation
    action: logbook.log
  mode: single

- id: 'ecoflow_status_benachrichtigung'
  alias: Notification » EcoFlow Status Updates
  description: >
    Sendet Benachrichtigungen bei wichtigen EcoFlow-Events wie 
    Vollladung, kritischem Batteriestand oder Systemfehlern
  triggers:
    # EcoFlow voll geladen
    - platform: numeric_state
      entity_id: sensor.stream_system_3683_power_battery_soc
      above: 95
      id: vollladung
    
    # EcoFlow kritisch niedrig
    - platform: numeric_state
      entity_id: sensor.stream_system_3683_power_battery_soc
      below: 15
      for:
        minutes: 10
      id: kritisch_niedrig
    
    # Automation automatisch deaktiviert (Sicherheit)
    - platform: state
      entity_id: input_boolean.ecoflow_automation_enabled
      to: 'off'
      for:
        minutes: 2
      id: automation_deaktiviert
    
    # Zu viele Zyklen am Tag
    - platform: numeric_state
      entity_id: counter.ecoflow_ladezyklen_heute
      above: 15
      id: viele_zyklen
  conditions:
    # Nur zwischen 8:00 und 22:00 Uhr benachrichtigen
    - condition: time
      after: '08:00:00'
      before: '22:00:00'
  actions:
    - choose:
        # EcoFlow vollständig geladen
        - conditions:
            - condition: trigger
              id: vollladung
            - condition: state
              entity_id: input_boolean.ecoflow_lademodus_aktiv
              state: 'on'
          sequence:
            - parallel:
                - action: notify.rafael
                  data:
                    title: "🔋 EcoFlow vollgeladen"
                    message: >
                      STREAM Pro ist bei {{ trigger.to_state.state }}% angelangt.
                      {{ states('counter.ecoflow_ladezyklen_heute') }} Ladezyklen heute.
                    data:
                      push:
                        interruption-level: passive
                
                - action: logbook.log
                  data:
                    message: >
                      EcoFlow STREAM Pro vollgeladen: {{ trigger.to_state.state }}%
                    name: EcoFlow Status
                    domain: automation

        # Kritisch niedriger Batteriestand
        - conditions:
            - condition: trigger
              id: kritisch_niedrig
          sequence:
            - parallel:
                - action: notify.rafael
                  data:
                    title: "⚠️ EcoFlow Batterie niedrig"
                    message: >
                      STREAM Pro nur noch {{ trigger.to_state.state }}% geladen!
                      Nachtmodus: {{ 'aktiv' if is_state('input_boolean.ecoflow_nachtmodus_aktiv', 'on') else 'inaktiv' }}
                    data:
                      push:
                        interruption-level: time-sensitive
                
                - action: logbook.log
                  data:
                    message: >
                      ⚠️ EcoFlow STREAM Pro kritisch niedrig: {{ trigger.to_state.state }}%
                    name: EcoFlow Warning
                    domain: automation

        # Automation wurde deaktiviert
        - conditions:
            - condition: trigger
              id: automation_deaktiviert
          sequence:
            - action: notify.rafael
              data:
                title: "🔧 EcoFlow Automation deaktiviert"
                message: >
                  Die EcoFlow-Steuerung wurde deaktiviert. 
                  Lade-/Entladezyklen heute: {{ states('counter.ecoflow_ladezyklen_heute') }}/{{ states('counter.ecoflow_entladezyklen_heute') }}
                data:
                  push:
                    interruption-level: active

        # Viele Schaltzyklen
        - conditions:
            - condition: trigger
              id: viele_zyklen
          sequence:
            - action: notify.rafael
              data:
                title: "📊 EcoFlow viele Zyklen"
                message: >
                  Bereits {{ trigger.to_state.state }} Ladezyklen heute.
                  Automation wird bei 20 Zyklen automatisch deaktiviert.
                data:
                  push:
                    interruption-level: passive
  mode: restart
