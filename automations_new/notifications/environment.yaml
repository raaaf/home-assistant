# Notifications - Environment.Yaml
# Generated by automation splitter - 2 automations
# Part of Home Assistant configuration

- id: '1697018634962'
  alias: Notifications » Heizung > 4 Stunden
  description: Benachrichtigt wenn Heizungen länger als 4 Stunden aktiv sind
  triggers:
  - entity_id: sensor.heizung_arbeitszimmer_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_kinderzimmer_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_badezimmer_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_flur_an
    above: 4
    trigger: numeric_state
  - entity_id: sensor.heizung_wohnzimmer_an
    above: 4
    trigger: numeric_state
  conditions:
  - condition: template
    value_template: >
      {% set last = state_attr('automation.notifications_heizung_4_stunden', 'last_triggered') %}
      {{ last is none or (now() - last).total_seconds() > 12 * 60 * 60 }}
  actions:
  - parallel:
      # TTS Ansage über HomePods
      - action: script.hausgeraete_ansage
        data:
          message: >-
            Die Heizung im {{ trigger.entity_id | regex_replace('^sensor.heizung_', '') | regex_replace('_an$', '') | replace('_', ' ') | title }}
            läuft seit über 4 Stunden
          priority: "normal"
      
      # Mobile Benachrichtigung
      - action: notify.rafael
        data:
          title: 'Heizung: {{ trigger.entity_id | regex_replace(''^sensor.heizung_'',
            '''') | regex_replace(''_an$'', '''') | replace(''_'', '' '') | title }}

            '
          message: 'Seit mehr als 4 Stunden aktiv (aktuell {{ trigger.to_state.state }}
            h).

            '
          data:
            push:
              interruption-level: critical
      
      # Persistent Notification als Backup
      - action: persistent_notification.create
        data:
          notification_id: "heizung_warnung_{{ trigger.entity_id | regex_replace('^sensor.heizung_', '') }}"
          title: "🔥 Heizung läuft zu lange"
          message: >-
            {{ trigger.entity_id | regex_replace('^sensor.heizung_', '') | regex_replace('_an$', '') | replace('_', ' ') | title }}
            seit {{ trigger.to_state.state }} Stunden aktiv
  mode: single
- id: '1738322846270'
  alias: Notification » Stromverbrauch gestern
  description: 'Erstellt eine persistente Benachrichtigung mit dem Stromverbrauch,
    der Solarproduktion, AC-Verbrauch und den Kosten des Vortages

    '
  triggers:
  - at: 00:05:00
    trigger: time
  conditions:
  - condition: template
    value_template: "{{ state_attr('sensor.taglicher_netzbezug','last_period')\
      \ is not none\n   and states('sensor.solarproduktion_gestern') not in\
      \ ['unknown', 'unavailable'] }}\n"
  actions:
  - variables:
      verbrauch_netto: '{{ state_attr(''sensor.taglicher_netzbezug'',''last_period'')
        | float(0) | round(2) }}

        '
      solarproduktion_gestern: '{{ states(''sensor.solarproduktion_gestern'')
        | float(0) }}

        '
      verbrauch_brutto: '{{ (verbrauch_netto + solarproduktion_gestern) | round(2)
        }}

        '
      strompreis: '{{ states(''sensor.butzabatza_electricity_price'') | float(0.30)
        }}

        '
      kosten_ohne_solar: '{{ (verbrauch_brutto * strompreis) | round(2) }}

        '
      ersparnis_gestern: '{{ (solarproduktion_gestern * strompreis) | round(2) }}

        '
      kosten_nach_solar: '{{ (verbrauch_netto * strompreis) | round(2) }}

        '
      durchschnitt_pro_stunde: '{{ (verbrauch_netto / 24) | round(2) }}

        '
      datum_gestern: '{{ (now() - timedelta(days=1)).strftime(''%d.%m.%Y'') }}

        '
      ac_verbrauch_gestern: '{{ state_attr(''sensor.ac_current_energy'',''last_period'')
        | float(0) | round(2) }}

        '
      ac_kosten_gestern: '{{ (state_attr(''sensor.ac_current_energy'',''last_period'')
        | float(0) * strompreis) | round(2) }}

        '
      ac_anteil_prozent: "{% if verbrauch_brutto > 0 %}\n  {{ ((ac_verbrauch_gestern\
        \ / verbrauch_brutto) * 100) | round(1) }}\n{% else %}\n  0\n{% endif %}\n"
      ac_laufzeit_stunden: "{% set avg_power = states('sensor.ac_power') | float(0)\
        \ %} {% if avg_power > 50 and ac_verbrauch_gestern > 0 %}\n  {{ (ac_verbrauch_gestern\
        \ * 1000 / avg_power) | round(1) }}\n{% else %}\n  {% set energy_diff = states('sensor.ac_current_energy')\
        \ | float(0) %}\n  {% if energy_diff > 0.1 %}\n    {{ (ac_verbrauch_gestern\
        \ * 1000 / 800) | round(1) }}\n  {% else %}\n    0\n  {% endif %}\n{% endif\
        \ %}\n"
  - data:
      title: ⚡ Stromverbrauch {{ datum_gestern }}
      message: '**📊 Verbrauch:** 🔌 Gesamt (Brutto): {{ verbrauch_brutto }} kWh 🔌 Netzbezug
        (Netto): {{ verbrauch_netto }} kWh ⏳ Ø pro Stunde: {{ durchschnitt_pro_stunde
        }} kWh

        **❄️ Klimaanlage:** Verbrauch: {{ ac_verbrauch_gestern }} kWh ({{ ac_anteil_prozent
        }}% vom Gesamtverbrauch) Kosten: {{ ac_kosten_gestern }} € Geschätzte Laufzeit:
        {{ ac_laufzeit_stunden }} Stunden

        **☀️ Solar:** Produktion: {{ solarproduktion_gestern }} kWh Selbstnutzung:
        100% angenommen

        **💰 Kosten:** ({{ strompreis }} €/kWh) Ohne Solar: {{ kosten_ohne_solar }}
        € Ersparnis: −{{ ersparnis_gestern }} € ➔ Tatsächlich: {{ kosten_nach_solar
        }} €

        **📈 Effizienz:** Autarkiegrad: {{ ((solarproduktion_gestern / verbrauch_brutto
        * 100) | round(0)) }}%

        '
    action: persistent_notification.create
  - data:
      message: 'Tagesstatistik {{ datum_gestern }}:   Verbrauch {{ verbrauch_brutto
        }} kWh (Netto: {{ verbrauch_netto }} kWh),   AC-Verbrauch {{ ac_verbrauch_gestern
        }} kWh ({{ ac_anteil_prozent }}%), Solar {{ solarproduktion_gestern }} kWh,   Kosten
        {{ kosten_nach_solar }} € (Ersparnis: {{ ersparnis_gestern }} €),   Autarkiegrad
        {{ ((solarproduktion_gestern / verbrauch_brutto * 100) | round(0)) }}%

        '
      name: Stromstatistik
      domain: sensor
    action: logbook.log
  mode: single
