# ============================================================================
# HOME ASSISTANT CORE CONFIGURATION
# ============================================================================

# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

homeassistant:
  # Multi-Factor Authentication
  auth_mfa_modules:
    - type: totp

  # External URL for secure access
  external_url: "https://ha.rafaelalex.de"

  # Authentication providers
  auth_providers:
    - type: trusted_networks
      trusted_networks:
        - 192.168.178.0/24
        - 127.0.0.1
        - ::1
      allow_bypass_login: false
    - type: homeassistant

# ============================================================================
# NETWORK & SECURITY
# ============================================================================

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 172.30.33.0/24
    - 127.0.0.1
    - 192.168.178.72
    - 192.168.188.118
    - ::1
  ip_ban_enabled: true
  login_attempts_threshold: 5
  # SSL certificates (uncomment when using)
  # ssl_certificate: /ssl/fullchain.pem
  # ssl_key: /ssl/privkey.pem

# ============================================================================
# LOGGING & MONITORING
# ============================================================================

logger:
  default: error
  logs:
    homeassistant.components: warning
    homeassistant.components.http: error
    homeassistant.components.automation: info
    homeassistant.components.script: info
    homeassistant.components.template: warning
    homeassistant.components.mqtt: warning
    homeassistant.components.recorder: warning
    homeassistant.components.powercalc: info

# Database optimization
recorder:
  purge_keep_days: 30
  auto_purge: true
  commit_interval: 30
  db_url: !secret db_url
  exclude:
    domains:
      - automation
      - updater
      - device_tracker
      - persistent_notification
      - script
    entities:
      - sensor.last_boot
      - sensor.date
      - sensor.time
      - sensor.roborock_a27_737e_status  # Excluded due to state list too long (>255 chars)
      # Exclude specific problematic energy sensors that cause utility meter errors
      - sensor.homepod_arbeitszimmer_energy
      - sensor.kamera_schlafzimmer_energy
    entity_globs:
      - sensor.*_battery_level
      - sensor.*_rssi
      - sensor.*_linkquality
      # Exclude specific problematic utility meter sensors
      - sensor.homepod_*_energy_*
      - sensor.kamera_*_energy_*

# History configuration - filtering handled by recorder configuration

# ============================================================================
# COMMUNICATION & NOTIFICATIONS
# ============================================================================

mobile_app:
cloud:

# Notifications
notify: !include notifies.yaml

# Telegram (disabled)
# telegram_bot:
#   - platform: polling
#     api_key: !secret telegram_api_key
#     allowed_chat_ids:
#       - 6310607652

# ============================================================================
# USER INTERFACE
# ============================================================================

frontend:
  themes: !include_dir_merge_named themes

# ============================================================================
# EXTERNAL INTEGRATIONS
# ============================================================================

# Waste Collection Schedule
waste_collection_schedule:
  sources:
    - name: abfallwirtschaft_fuerth_eu
      args:
        id: 102471001
      customize:
        - type: Restabfall
          alias: Restmuell
          icon: mdi:trash-can
        - type: Bioabfall
          alias: Bioabfall
          icon: mdi:recycle
        - type: Altpapier
          alias: Papier
          icon: mdi:newspaper
        - type: "Gelber Sack"
          alias: GelberSack
          icon: mdi:recycle-variant
  fetch_time: "04:00"
  day_switch_time: "10:00"

# Adaptive Lighting
adaptive_lighting: !include adaptive_lighting.yaml

# Power Calculation
powercalc:
  enable_autodiscovery: true
  create_utility_meters: true
  utility_meter_types:
    - daily
    - weekly
    - monthly
  power_sensor_naming: "{} Power"
  power_sensor_friendly_naming: "{} Power"
  energy_sensor_naming: "{} Energy"
  energy_sensor_friendly_naming: "{} Energy"
  energy_sensor_precision: 2
  power_sensor_precision: 2
  # Handle edge cases and errors gracefully
  disable_extended_attributes: true
  ignore_unavailable_state: true

# ============================================================================
# TEMPLATE SENSORS
# ============================================================================

template:
  # Vacuum/Robot sensors
  - sensor:
      - name: "Xiaomi Vacuum Charging State"
        unique_id: xiaomi_vacuum_charging_state
        icon: "mdi:battery-charging-medium"
        state: >
          {% if states('vacuum.robbi_2') == 'docked' %}
            {% if state_attr('vacuum.robbi_2', 'battery_level') | int(0) < 100 %}
              charging
            {% else %}
              docked
            {% endif %}
          {% elif states('vacuum.robbi_2') == 'cleaning' %}
            cleaning
          {% elif states('vacuum.robbi_2') == 'returning' %}
            returning
          {% else %}
            idle
          {% endif %}

      - name: "Roborock Status Simplified"
        unique_id: roborock_status_simplified
        icon: "mdi:robot-vacuum"
        state: >
          {% set vacuum_state = states('vacuum.robbi_2') %}
          {% if vacuum_state == 'docked' %}
            docked
          {% elif vacuum_state == 'cleaning' %}
            cleaning
          {% elif vacuum_state == 'returning' %}
            returning
          {% elif vacuum_state == 'paused' %}
            paused
          {% elif vacuum_state == 'error' %}
            error
          {% elif vacuum_state == 'idle' %}
            idle
          {% elif vacuum_state in ['unknown', 'unavailable'] %}
            unavailable
          {% else %}
            {{ vacuum_state }}
          {% endif %}
        availability: >
          {{ states('vacuum.robbi_2') not in ['unknown', 'unavailable'] }}
      - name: "Roborock A27 Status Fixed"
        unique_id: roborock_a27_status_fixed
        icon: "mdi:robot-vacuum"
        state: >
          {% set vacuum = states('vacuum.robbi_2') %}
          {% if vacuum == 'docked' %}
            Docked
          {% elif vacuum == 'cleaning' %}
            Cleaning
          {% elif vacuum == 'returning' %}
            Returning
          {% elif vacuum == 'paused' %}
            Paused
          {% elif vacuum == 'error' %}
            Error
          {% elif vacuum == 'idle' %}
            Idle
          {% else %}
            {{ vacuum | title }}
          {% endif %}
        availability: >
          {{ states('vacuum.robbi_2') not in ['unknown', 'unavailable'] }}

  # Time-based sensors
  - sensor:
      - name: "WakeUp Light Timestamp"
        unique_id: wakeup_light_timestamp
        device_class: timestamp
        state: >
          {% if is_state("binary_sensor.workday_sensor", "on") %}
            {{ today_at(states('input_datetime.aufwachzeit_arbeitstag')) }}
          {% else %}
            {{ today_at(states('input_datetime.aufwachzeit_freier_tag')) }}
          {% endif %}
        availability: >
          {{ states('binary_sensor.workday_sensor') not in ['unknown', 'unavailable'] and
             states('input_datetime.aufwachzeit_arbeitstag') not in ['unknown', 'unavailable'] and
             states('input_datetime.aufwachzeit_freier_tag') not in ['unknown', 'unavailable'] }}

      - name: "Einschlafzeit Timestamp"
        unique_id: einschlafzeit_timestamp
        device_class: timestamp
        state: >
          {% if is_state("binary_sensor.tomorrow_workday_sensor", "on") %}
            {{ today_at(states('input_datetime.einschlafzeit_arbeitstag')) }}
          {% else %}
            {{ today_at(states('input_datetime.einschlafzeit_freier_tag')) }}
          {% endif %}
        availability: >
          {{ states('binary_sensor.tomorrow_workday_sensor') not in ['unknown', 'unavailable'] and
             states('input_datetime.einschlafzeit_arbeitstag') not in ['unknown', 'unavailable'] and
             states('input_datetime.einschlafzeit_freier_tag') not in ['unknown', 'unavailable'] }}

  # Weather forecast sensor with trigger
  - trigger:
      - platform: time_pattern
        minutes: "/30" # Every 30 minutes instead of every minute
      - platform: homeassistant
        event: start
      - platform: event
        event_type: event_template_reloaded
    action:
      - action: weather.get_forecasts
        target:
          entity_id: weather.fuerth_bayern
        data:
          type: daily
        response_variable: daily_forecast
    sensor:
      - name: "FÃ¼rth Daily Forecast"
        unique_id: fuerth_bayern_daily
        state: "{{ states('weather.fuerth_bayern') }}"
        attributes:
          temperature: "{{ state_attr('weather.fuerth_bayern', 'temperature') }}"
          dew_point: "{{ state_attr('weather.fuerth_bayern', 'dew_point') }}"
          temperature_unit: "{{ state_attr('weather.fuerth_bayern', 'temperature_unit') }}"
          humidity: "{{ state_attr('weather.fuerth_bayern', 'humidity') }}"
          cloud_coverage: "{{ state_attr('weather.fuerth_bayern', 'cloud_coverage') }}"
          pressure: "{{ state_attr('weather.fuerth_bayern', 'pressure') }}"
          pressure_unit: "{{ state_attr('weather.fuerth_bayern', 'pressure_unit') }}"
          wind_bearing: "{{ state_attr('weather.fuerth_bayern', 'wind_bearing') }}"
          wind_gust_speed: "{{ state_attr('weather.fuerth_bayern', 'wind_gust_speed') }}"
          wind_speed: "{{ state_attr('weather.fuerth_bayern', 'wind_speed') }}"
          wind_speed_unit: "{{ state_attr('weather.fuerth_bayern', 'wind_speed_unit') }}"
          visibility: "{{ state_attr('weather.fuerth_bayern', 'visibility') }}"
          visibility_unit: "{{ state_attr('weather.fuerth_bayern', 'visibility_unit') }}"
          precipitation: "{{ state_attr('weather.fuerth_bayern', 'precipitation') }}"
          precipitation_unit: "{{ state_attr('weather.fuerth_bayern', 'precipitation_unit') }}"
          forecast: "{{ daily_forecast['weather.fuerth_bayern'].forecast[:5] }}"

  # Heating efficiency and energy sensors
  - sensor:
      - name: "Heating Efficiency Score"
        unique_id: heating_efficiency_score
        unit_of_measurement: "%"
        icon: "mdi:thermometer-chevron-up"
        state: >
          {% set total_heating_time = (
            (states('sensor.heizung_arbeitszimmer_an') | float(0)) +
            (states('sensor.heizung_badezimmer_an') | float(0)) +
            (states('sensor.heizung_flur_an') | float(0)) +
            (states('sensor.heizung_wohnzimmer_an') | float(0)) +
            (states('sensor.heizung_kinderzimmer_an') | float(0))
          ) %}
          {% set outside_temp = state_attr('weather.fuerth_bayern', 'temperature') | float(15) %}
          {% set baseline_efficiency = 100 - (total_heating_time / 24 * 100) %}
          {% set temp_factor = 1 + ((15 - outside_temp) / 100) %}
          {{ (baseline_efficiency * temp_factor) | round(1) }}
        availability: >
          {{ states('sensor.heizung_arbeitszimmer_an') not in ['unknown', 'unavailable'] and
             states('sensor.heizung_badezimmer_an') not in ['unknown', 'unavailable'] and
             states('sensor.heizung_flur_an') not in ['unknown', 'unavailable'] and
             states('sensor.heizung_wohnzimmer_an') not in ['unknown', 'unavailable'] and
             states('sensor.heizung_kinderzimmer_an') not in ['unknown', 'unavailable'] and
             state_attr('weather.fuerth_bayern', 'temperature') is not none }}

      - name: "Thermal Mass Utilization"
        unique_id: thermal_mass_utilization
        unit_of_measurement: "%"
        icon: "mdi:home-thermometer-outline"
        state: >
          {% set avg_temp = (
            (states('sensor.temperatur_arbeitszimmer') | float(20)) +
            (states('sensor.temperatur_badezimmer') | float(20)) +
            (states('sensor.temperatur_wohnzimmer') | float(20)) +
            (states('sensor.temperatur_schlafzimmer') | float(20)) +
            (states('sensor.temperatur_kinderzimmer') | float(20))
          ) / 5 %}
          {% set target_temp = 21 %}
          {% set temp_deviation = (avg_temp - target_temp) | abs %}
          {% set utilization = 100 - (temp_deviation * 10) %}
          {{ [utilization, 0] | max | round(1) }}
        availability: >
          {{ states('sensor.temperatur_arbeitszimmer') not in ['unknown', 'unavailable'] and
             states('sensor.temperatur_badezimmer') not in ['unknown', 'unavailable'] and
             states('sensor.temperatur_wohnzimmer') not in ['unknown', 'unavailable'] and
             states('sensor.temperatur_schlafzimmer') not in ['unknown', 'unavailable'] and
             states('sensor.temperatur_kinderzimmer') not in ['unknown', 'unavailable'] }}

      - name: "Heating Zones Disabled Savings"
        unique_id: heating_zones_disabled_savings
        unit_of_measurement: "â¬"
        icon: "mdi:cash-multiple"
        state: >
          {% set disabled_zones = [
            states('switch.heizung_arbeitszimmer'),
            states('switch.heizung_badezimmer'),
            states('switch.heizung_flur'),
            states('switch.heizung_wohnzimmer'),
            states('switch.heizung_kinderzimmer')
          ] | select('eq', 'off') | list | count %}
          {% set cost_per_zone_per_hour = 0.35 %}
          {% set hours_today = now().hour %}
          {{ (disabled_zones * cost_per_zone_per_hour * hours_today) | round(2) }}
        availability: >
          {{ states('switch.heizung_arbeitszimmer') not in ['unknown', 'unavailable'] and
             states('switch.heizung_badezimmer') not in ['unknown', 'unavailable'] and
             states('switch.heizung_flur') not in ['unknown', 'unavailable'] and
             states('switch.heizung_wohnzimmer') not in ['unknown', 'unavailable'] and
             states('switch.heizung_kinderzimmer') not in ['unknown', 'unavailable'] }}

utility_meter:
  ac_energy_daily:
    source: sensor.ac_total_energy
    name: "AC Energie TÃ¤glich"
    cycle: daily
    
  # Utility meters for grid import/export tracking
  taglicher_netzbezug:
    source: sensor.netzbezug_energie
    name: "TÃ¤glicher Netzbezug"
    cycle: daily
    
  tagliche_einspeisung:
    source: sensor.einspeisung_energie
    name: "TÃ¤gliche Einspeisung"
    cycle: daily
    
  # Utility Meter fÃ¼r Energy mÃ¼ssen Integration Sensoren verwenden
  # Diese werden automatisch durch Home Assistant Energy Dashboard erstellt
  # Falls sie nicht existieren, kÃ¶nnen sie Ã¼ber Settings > Energy konfiguriert werden


input_boolean:
  haustur_besucher_inside:
    name: "Besucher ist im Haus"
    initial: false
    icon: "mdi:account-clock"

input_datetime:
  haustur_eingang_zeit:
    name: "Eingangszeit Besucher"
    has_date: true
    has_time: true
    
  haustur_letzter_eingang:
    name: "Letzter Eingang Ã¼ber HaustÃ¼r"
    has_date: true
    has_time: true

input_text:
  haustur_besucher_dauer:
    name: "Besuchsdauer"
    initial: ""
    max: 100

# ============================================================================
# EXTERNAL FILE INCLUDES
# ============================================================================

automation: !include_dir_merge_list automations_new/
script: !include scripts.yaml
scene: !include scenes.yaml
sensor: !include sensors.yaml
binary_sensor: !include binary_sensors.yaml
group: !include groups.yaml
light: !include lights.yaml
timer: !include timers.yaml
climate: !include climates.yaml

# Dashboard Konfiguration
lovelace:
  mode: storage

# ============================================================================
# SYSTEM FEATURES
# ============================================================================

python_script:
system_health:
energy:
backup:

# System Monitor integration must be configured via UI
# Go to Settings > Devices & Services > Add Integration > System Monitor
# This will create entities like sensor.processor_use_percent, etc.


  
